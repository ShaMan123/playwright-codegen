import { test, expect } from "@playwright/test";

// This file is readonly and gets written frequently

test("codegen output", async ({ page }, testInfo) => {
  // you may need to replace the `selector` value
  const selector = "#canvas";

  await page.goto("http://localhost:8000/");
  await page.mouse.move(451, 51);
  await page.mouse.down();
  await page.mouse.move(300, 206, { steps: 9 });
  await page.mouse.up();
  await test.step("1", async () => {
    await page.mouse.move(276, 211);
    await page.mouse.down();
    await page.mouse.move(144, 48, { steps: 9 });
    await page.mouse.up();
    await test.step("2", async () => {
      await page.mouse.move(141, 80);
      await page.mouse.down();
      await page.mouse.move(135, 557, { steps: 9 });
      await page.mouse.up();
    });
    await page.mouse.move(236, 302);
    await page.mouse.down();
    await page.mouse.move(475, 292, { steps: 9 });
    await page.mouse.up();
    await test.step("screenshots", async () => {
      expect(
        await page
          .locator(selector)
          .screenshot({ clip: { x: 0, y: 0, width: 500, height: 500 } }),
      ).toMatchSnapshot();
      expect(
        await page
          .locator(selector)
          .screenshot({ clip: { x: 0, y: 0, width: 500, height: 500 } }),
      ).toMatchSnapshot({ name: "a.png" });
      expect(
        await page
          .locator(selector)
          .screenshot({ clip: { x: 0, y: 0, width: 500, height: 500 } }),
      ).toMatchSnapshot({ name: "b.png" });
      await test.step("modifier keys", async () => {
        await page.mouse.move(483, 563);
        await page.mouse.down();
        await page.keyboard.down("Shift");
        await page.mouse.move(805, 600, { steps: 9 });
        await page.keyboard.press("Shift+Alt");
        await page.mouse.move(700, 572, { steps: 9 });
        await page.keyboard.down("Ctrl+Shift+Control");
        await page.keyboard.up("Shift+Control");
        await page.mouse.move(455, 515, { steps: 9 });
        await page.keyboard.up("Shift");
        await page.mouse.move(469, 417, { steps: 9 });
        await page.mouse.up();
        await test.step("typing", async () => {
          await page.mouse.click(66, 300);
          await page.keyboard.press("1");
          await page.keyboard.press("2");
          await page.keyboard.press("3");
          await page.keyboard.down("Shift");
          await page.keyboard.press("Shift+!");
          await page.keyboard.press("Shift+@");
          await page.keyboard.press("Shift+#");
          await page.keyboard.up("Shift");
          await page.keyboard.down("Alt");
          await page.keyboard.press("Alt+1");
          await page.keyboard.press("Alt+2");
          await page.keyboard.press("Alt+3");
          await page.keyboard.up("Alt");
          await page.keyboard.down("Ctrl+Control");
          await page.keyboard.press("Ctrl+1");
          await page.keyboard.press("Ctrl+1");
          await page.keyboard.press("Ctrl+2");
          await page.keyboard.press("Ctrl+3");
          await page.keyboard.down("Ctrl+Alt");
          await page.keyboard.press("Alt+Ctrl+1");
          await page.keyboard.press("Alt+Ctrl+2");
          await page.keyboard.press("Alt+Ctrl+3");
          await page.keyboard.up("Ctrl+Alt");
          await page.keyboard.up("Control");
          await page.mouse.move(227, 264);
          await page.mouse.down();
          await page.mouse.move(64, 250, { steps: 9 });
          await page.mouse.up();
          await page.keyboard.press("Delete");
          await page.mouse.dblclick(113, 272);
          await page.keyboard.down("Meta");
          await page.keyboard.press("Meta+S");
          await page.keyboard.up("Meta+Shift");
          await page.keyboard.up("Meta");
        });
      });
    });
  });
});
